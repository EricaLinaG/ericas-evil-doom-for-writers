* doom.d

My =Doom-Emacs= configuration.

[[file:splash/emacs.png]]

** Introduction
This is my Emacs configuration, my Hotel California of Creative Writing.

It features all the bells and whistles that I could ever want from a writing environment, and nothing else.

For a very detailed walkthrough of what this configuration provides, see
[[https://jacmoe.github.io/.doom.d/][https://jacmoe.github.io/.doom.d/]]

/The walkthrough is currently a work in progress. This notice will be removed once it gets finished./

** Prerequisites
/This has been tested on Linux, and to some degree, Windows. I recently got rid of Windows, so I am not personally going to be able to provide any help with that, and I might even remove Windows specific instructions from this Readme in the future./

First, make sure that you have at least Emacs 28.1 installed, and have made sure that Git and the other prerequisites of Doom-Emacs are satisfied:
[[https://github.com/hlissner/doom-emacs#prerequisites][Doom-Emacs - Prerequisites]]

This configuration uses the following packages that have dependencies:
*** Org-Roam

=org-roam= uses a custom SQLite binary to store its database, and it will compile it when it installs. So there must be a C compiler available to Emacs.

On Linux, there are likely to be a C compiler installed, but Windows is different.

One option is to use MSYS2, which is Linux distribution for Windows. Follow the instructions on [[https://www.msys2.org/][MSYS2 home page]]. Be sure to install the full mingw-w64 GCC software collection.

Make sure that you add the =bin= directory of you MSYS2 installation to your system path, so that Emacs can find it.

On my machine, I had to add =C:\msys64\mingw64\bin=
*** Aspell
We use =Aspell= for spellchecking, instead of other options, because I think it works better, and because it, unlike =hunspell=, allows me to make use of the =C-;= key-chord (usually reserved for =flyspell=)
**** Linux

If Aspell is not installed, install =aspell= using your package manager.

**** Windows

Assuming that you installed MSYS2, including the mingw compiler suite, you can simply open up a MSYS2 command line and run:

=pacman -Ss aspell=

That will give you a list of aspell related packages to install.

Here's the packages that I installed:

=pacman -S mingw-w64-x86_64-aspell=

=pacman -S mingw-w64-x86_64-aspell-en=

If you followed the guide for how to install the C compiler, then Emacs will be able to find =aspell=, and all should be well.

*** Vale
[[https://vale.sh/][Vale.sh]] is used for prose linting.


The easiest way to install Vale is to download a binary release from [[https://github.com/errata-ai/vale/releases][Vale Github Releases]] and put the binary in your PATH. Emacs needs to be able to find the Vala binary.


Now you need to download some Vala style checkers. There is a list of the available styles here: [[https://github.com/errata-ai/packages][errata-ai/packages]].

I installed the following styles:
- proselint : [[https://github.com/errata-ai/proselint/releases][Releases · errata-ai/proselint]]
- write-good : [[https://github.com/errata-ai/write-good/releases][Releases · errata-ai/write-good]]
- alex : [[https://github.com/errata-ai/alex/releases][Releases · errata-ai/alex]]
- joblint : [[https://github.com/errata-ai/Joblint/releases][Releases · errata-ai/Joblint]]
- readability: [[https://github.com/errata-ai/Joblint/releases][Releases · errata-ai/readability]]

Download and extract into a place where they can easily be found, like in =~/vala-styles= for instance.

Now you can place a =.vale.ini= file in any top level directory where you want Vale to check your prose.

An example:
#+begin_src
StylesPath = /path/to/vale-styles
MinAlertLevel = warning

[*]
BasedOnStyles = proselint, write-good
#+end_src

See the Vale home page for more information.

*** Hugo
I use [[https://ox-hugo.scripter.co/][Ox-Hugo]] to export and generate an Epub, and to write blog posts, and if you want that, you need to install [[https://gohugo.io/][Hugo]].
*** PDF diff and export
Even if you do not plan to make use of Latex, or Latexdiff, I found that installing the =latexdiff= package fixed my issues with exporting to PDF, so you might want to do that too. And maybe also the =texlive-bibtex-extra= and =texlive-latex-extra= packages.

On Windows you are most probably out of luck. I haven’t found a way to install all required LaTeX packages, so don’t export to PDF :) Or export to ODT (LibreOffice) and export from there.

*** Fonts
This configuration uses the [[https://github.com/RedHatOfficial/Overpass][Overpass]] fonts. Install both ~Overpass~ and ~Overpass Mono~ on your system so that Emacs can use them.

For Unicode emojis, install an emoji font like [[http://legionfonts.com/fonts/segoe-ui-emoji][Segoe UI Emoji]]

If you want to use your own fonts, do change the configuration, around line 90 in ~config.el~.
*** Email
**** offlineimap and notmuch
In order to read email with Emacs, install =offlineimap= and =notmuch= following the steps outlined in this article, up until sending email:
[[https://firminmartin.com/en/posts/2020/10/read_email_in_emacs_with_notmuch/][Read and Compose Email in Emacs with Notmuch – Firmin Martin]]

Be sure that running =offlineimap= and =notmuch new= works without error before proceeding.
**** msmtp
Install =msmtp= and create a basic configuration file (=~/.msmtprc=) using this wiki article:
[[https://wiki.archlinux.org/title/Msmtp#Basic_setup][msmtp - ArchWiki]]
**** Notmuch Address Lookup tool
To aid in looking up email addresses for auto-completion, we need to download (via git) and compile an address lookup tool coded in C.
#+begin_src
git clone git@github.com:aperezdc/notmuch-addrlookup-c.git
cd notmuch-addrlookup-c
make
#+end_src
See [[https://github.com/aperezdc/notmuch-addrlookup-c][aperezdc/notmuch-addrlookup-c]] for details.
** Installation
*** Hotel California
Clone the Hotel California repository into =~/.doom.d=, like this:

=git clone https://github.com/jacmoe/.doom.d ~/.doom.d=

*** Doom-Emacs
Make sure that there isn’t a ~.emacs.d~ directory on your machine. If you are running Emacs, there is, so you need to either delete or rename it.

To install Doom-Emacs, clone it into ~.emacs.d~ , and run the Doom-Emacs installation script:

#+BEGIN_SRC
git clone --depth 1 https://github.com/hlissner/doom-emacs ~/.emacs.d

~/.emacs.d/bin/doom install
#+END_SRC
Don’t try to run Emacs just yet!

What you can do, however, is check the installation by running the Doom-Emacs doctor, like so:

=~./.emacs.d/bin doom doctor=

It should run without errors or warnings, but if it doesn’t, you should be able to fix the issues in most cases based on what the doctor orders.

You need to change some variables around line 20 in =config.el=, the location of personal dictionary, bookmarks and Org folders. Also be sure to change the personal information around line 40, and correct the path to the C address lookup tool you compiled earlier.


If you changed anything in =init.el= or =packages.el=, though I can’t think of a valid reason why you’d do such a thing, you need to run the Doom-Emacs sync script:

=~/.emacs.d/bin/doom sync=


Probably a good idea to add =~./emacs.d/bin= to your =PATH=, for example by adding it to your exports in =.bashrc=.

Now, fire up Emacs, and you should be looking at the Hotel California of Creative Writing starting screen.

All you need to do now is to press =C-x C-f= and start making yourself comfortable with your new writing environment.

You might want to read the extensive guide here: [[https://jacmoe.github.io/.doom.d/][https://jacmoe.github.io/.doom.d/]], or at least have it ready as a reference.

Happy Writing!

#  LocalWords:  MSYS mingw aspell Proselint Palahniuk Elmore Butterick Strunk
#  LocalWords:  Elwyn Corbett Gowers Latexdiff UI ODT
